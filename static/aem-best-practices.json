{
  "lcp": [
    "## **Title:** Prioritize the LCP Image and Lazy-Load Other Images\n\n*   **Description:** The most important image on the page (the LCP element) is competing for network resources with other, less critical images. This delays the LCP and worsens the user experience. By explicitly telling the browser which image to load eagerly and which to load lazily, we can ensure the main content is visible much faster.\n*   **Implementation Priority:** High\n*   **Implementation Effort:** Easy\n*   **Details:**\n    *   Set `loading=\"eager\"` on the LCP `<img>` element\n    *   Set `loading=\"lazy\"` on all other non-critical images that appear below the fold\n    *   This prevents them from being loaded until the user scrolls near them, freeing up bandwidth for the LCP image\n*   **Expected Impact:** LCP reduction of 400-800ms",
    "## **Title:** Split CSS into Critical and Non-Critical Files to Unblock Rendering\n\n*   **Description:** A large, single CSS file is blocking the page from rendering until it is fully downloaded and parsed. Much of this CSS is not needed for the initial view. This \"render-blocking\" behavior significantly delays when users can see content, negatively impacting LCP.\n*   **Implementation Priority:** High\n*   **Implementation Effort:** Medium\n*   **Details:**\n    *   Separate CSS into \"critical\" and \"non-critical\" parts\n    *   Critical CSS should contain only minimal styles required for initial viewport (above the fold)\n    *   Load critical CSS synchronously in the `<head>`\n    *   Load non-critical CSS asynchronously so it doesn't block initial rendering\n*   **Expected Impact:** LCP reduction of 300-600ms",
    "## **Title:** Optimize Custom Font Loading to Speed Up Text Rendering\n\n*   **Description:** Custom fonts are blocking the display of important text, including the page's headline, until the font files are fully downloaded. This delay contributes to a higher LCP if the LCP element is a block of text.\n*   **Implementation Priority:** Medium\n*   **Implementation Effort:** Medium\n*   **Details:**\n    *   Host fonts on your own domain to avoid extra connection to third-party domain\n    *   Preload the most critical font files in the `<head>`\n    *   Use `font-display: swap;` in `@font-face` declaration to show fallback font immediately\n*   **Expected Impact:** LCP reduction of 200-400ms"
  ],
  "cls": [
    "## **Title:** Prevent Layout Shifts by Specifying Image Dimensions\n\n*   **Description:** Images on the page are loading without their dimensions being specified. This causes content to jump around as images load, creating a jarring user experience and a high Cumulative Layout Shift (CLS) score.\n*   **Implementation Priority:** High\n*   **Implementation Effort:** Easy\n*   **Details:**\n    *   Add `width` and `height` attributes to all `<img>` elements\n    *   This allows the browser to reserve the correct amount of space for the image before it loads\n    *   Use CSS to ensure images remain responsive (e.g., `max-width: 100%; height: auto;`)\n*   **Expected Impact:** CLS reduction of 0.1-0.2",
    "## **Title:** Stabilize Layout During Font Loading\n\n*   **Description:** The switch between the fallback font and the custom web font causes a noticeable shift in layout because the two fonts have different sizes. This contributes to the CLS score and makes the page feel unstable.\n*   **Implementation Priority:** Medium\n*   **Implementation Effort:** Medium\n*   **Details:**\n    *   Use the `size-adjust` CSS descriptor in your `@font-face` rule\n    *   Normalize the size of the fallback font to match the custom font\n    *   This minimizes the layout shift when the custom font loads\n    *   Use online tools to calculate the correct `size-adjust` value\n*   **Expected Impact:** CLS reduction of 0.05-0.1"
  ],
  "inp": [
    "## **Title:** Improve Page Interactivity by Deferring Non-Essential JavaScript\n\n*   **Description:** A large JavaScript bundle is being downloaded and executed early during page load, which blocks the browser from responding to user interactions like clicks or typing. This leads to a poor Interaction to Next Paint (INP) score and makes the page feel sluggish.\n*   **Implementation Priority:** High\n*   **Implementation Effort:** Medium\n*   **Details:**\n    *   Split your JavaScript into smaller chunks\n    *   Load essential, interactive scripts with `defer` so they don't block parsing\n    *   Load scripts for non-critical features (e.g., social media widgets, analytics) after the page is interactive\n    *   Use either a delay (`setTimeout`) or load when the user scrolls them into view\n*   **Expected Impact:** INP improvement of 100-200ms"
  ]
}
